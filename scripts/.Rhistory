## Simple linear model example
rm(list = ls())
gc()
modelName <- "T1_counts"
data_derived <- "T1_stan_data.csv"
## Relative paths assuming the working directory is the script directory
## containing this script
projectDir <- getwd()
scriptDir <- file.path(projectDir, "scripts")
figDir <- file.path(projectDir, "deliv", "figures", modelName)
tabDir <- file.path(projectDir, "deliv", "tables", modelName)
dataDir <- file.path(projectDir, "data", data_derived)
modelDir <- file.path(projectDir, "models")
outDir <- file.path(modelDir, modelName)
toolsDir <- file.path(scriptDir, "tools")
#source(file.path(scriptDir, "pkgSetup.R"))
library(rstan)
library(bayesplot)
library(tidyverse)
library(parallel)
source(file.path(toolsDir, "stanTools.R"))
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
set.seed(1027) ## not required but assures repeatable results
################################################################################################
## import the data set
data_imp <- read_csv(dataDir)%>%
select(-contains("Time"))
## create data set
data <- with(data_imp,
list(
nObs = nrow(data_imp),
counts = data_imp$counts
)
)
#data <- data_pre$counts
## create initial estimates
init <- function() list(
mu = rnorm(1, 6, 3),
sigma = exp(rnorm(1,log(1.5), 1)))
## Specify the variables for which you want history and density plots
parametersToPlot <- c("mu","sigma")
## Additional variables to monitor
otherRVs <- c("countspred")
parameters <- c(parametersToPlot, otherRVs)
################################################################################################
# run Stan
nChains <- 4
nPost <- 1000 ## Number of post-burn-in samples per chain after thinning
nBurn <- 1000 ## Number of burn-in samples per chain after thinning
nThin <- 1
nIter <- (nPost + nBurn) * nThin
nBurnin <- nBurn * nThin
dir.create(outDir)
fit <- stan(file = file.path(modelDir, paste(modelName, ".stan", sep = "")),
data = data,
pars = parameters,
iter = nIter,
warmup = nBurnin,
thin = nThin,
init = init,
chains = nChains)
## Simple linear ODE model -- Homogeneous model
rm(list = ls())
gc()
fancy_scientific <- function(l) {
# turn in to character string in scientific notation
l <- format(l, scientific = TRUE)
# quote the part before the exponent to keep all the digits
l <- gsub("^(.*)e", "'\\1'e", l)
# remove + after exponent, if exists. E.g.: (e^+2 -> e^2)
l <- gsub("e\\+","e",l)
# turn the 'e' into plotmath format
l <- gsub("e", "%*%10^", l)
# convert 1x10^ or 1.000x10^ -> 10^
l <- gsub("\\'1[\\.0]*\\'\\%\\*\\%", "", l)
# return this as an expression
parse(text=l)
}
log10minorbreaks=as.numeric(1:10 %o% 10^(4:8))
# loading the libraries required for smooth processing
library(rstan)
library(bayesplot)
library(tidyverse)
library(parallel)
library(loo)
modelName <- "simple_model_FM"
data_derived1 <- "counts_FM.csv"
data_derived2 <- "Nfd_FM.csv"
data_derived3 <- "ki67_FM.csv"
data_derived4 <- "T1_data.csv"
## Relative paths assuming the working directory is the script directory
## containing this script
projectDir <- getwd()
scriptDir <- file.path(projectDir, "scripts")
figDir <- file.path(projectDir, "deliv", "figures", modelName)
tabDir <- file.path(projectDir, "deliv", "tables", modelName)
dataDir <- file.path(projectDir, "data")
modelDir <- file.path(projectDir, "models")
outDir <- file.path(modelDir, modelName)
toolsDir <- file.path(scriptDir, "tools")
#source(file.path(scriptDir, "pkgSetup.R"))
source(file.path(toolsDir, "stanTools.R"))
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
set.seed(1027) ## not required but assures repeatable results
################################################################################################
counts_data <- read_csv(file.path(dataDir, data_derived1))
Nfd_data <- read_csv(file.path(dataDir, data_derived2))
ki67_data <- read_csv(file.path(dataDir, data_derived3))
source_data <- read_csv(file.path(dataDir, data_derived4))
## sort data set for the predictor vector
counts_sorted <- counts_data %>% arrange(days.post.bmt)
Nfd_sorted <- Nfd_data %>% arrange(days.post.bmt)
ki67_sorted <- ki67_data %>% arrange(days.post.bmt)
source_sorted <- source_data %>% arrange(days.post.bmt)
data_time <- counts_sorted$days.post.bmt    # time points in data
Ki_time <- ki67_sorted$days.post.bmt
solve_time <- c(0, unique(data_time))         # unique time points to solve ode
#keep track of index of time point in relation to solve_time
time_index <- purrr::map_dbl(data_time, function(x) which(x == solve_time))
ki_time_index <- purrr::map_dbl(Ki_time, function(x) which(x == solve_time))
## create data set
data <- list(
numObs = nrow(counts_sorted),
ts = data_time,
y1_0 = 0,
t0 = 0,
numPred = 500,
ts_pred = seq(1, 500),
counts = counts_sorted$total_counts,
Nfd = Nfd_sorted$Nfd,
num_index = length(solve_time),
solve_time = solve_time,
time_index = time_index,
nu = 0.0007534462,
chiEst = 0.7730747,
qEst =0.0477643,
beta = 1/3.5,
eps_donor = 0.653902,
eps_host = 0.5954523,
kappa_donor = 0.1198158,
kappa_host = 0.1144481
)
## create initial estimates
init <- function() list(
theta0log = rnorm(1, 14, 1),
lambda = rnorm(1, 0.01, 0.01),
y2_0log = rnorm(1, 17 , 1),
sigma1 = exp(rnorm(1,log(1.5), 1)),
sigma2 = exp(rnorm(1,log(1.5), 1)))
## Specify the variables for which you want history and density plots
parametersToPlot <- c("theta0Log","lambda", "y2_0Log", "sigma1", "sigma2")
## Additional variables to monitor
otherRVs <- c("y1_mean_pred", "countspred", "y2_mean_pred", "fdpred", "log_lik", "log_lik1", "log_lik2", "donor_kiprop_pred", "host_kiprop_pred")
parameters <- c(parametersToPlot, otherRVs)
################################################################################################
# run Stan
nChains <- 4
nPost <- 1500 ## Number of post-burn-in samples per chain after thinning
nBurn <- 500 ## Number of burn-in samples per chain after thinning
nThin <- 1
nIter <- (nPost + nBurn) * nThin
nBurnin <- nBurn * nThin
dir.create(outDir)
fit <- stan(file = file.path(modelDir, paste(modelName, ".stan", sep = "")),
data = data,
pars = parameters,
iter = nIter,
warmup = nBurnin,
thin = nThin,
init = init,
control = list(adapt_delta = 0.9),
chains = nChains)
################################################################################################
counts_data <- read_csv(file.path(dataDir, data_derived1))
dataDir
projectDir
